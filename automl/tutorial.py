# -*- coding: utf-8 -*-
"""tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/google/automl/blob/master/efficientdet/tutorial.ipynb

# EfficientDet Tutorial: inference, eval, and training 



<table align="left"><td>
  <a target="_blank"  href="https://github.com/google/automl/blob/master/efficientdet/tutorial.ipynb">
    <img src="https://www.tensorflow.org/images/GitHub-Mark-32px.png" />View source on github
  </a>
</td><td>
  <a target="_blank"  href="https://colab.sandbox.google.com/github/google/automl/blob/master/efficientdet/tutorial.ipynb">
    <img width=32px src="https://www.tensorflow.org/images/colab_logo_32px.png" />Run in Google Colab</a>
</td></table>

# 0. Install and view graph.

## 0.1 Install package and download source code/image.
"""
import os
from subprocess import check_output
import time
import subprocess

MODEL = 'efficientdet-d0'  #@param

def download(m):
  if m not in os.listdir():
    os.system('curl.exe https://storage.googleapis.com/cloud-tpu-checkpoints/efficientdet/coco/{}.tar.gz --output {}.tar.gz'.format(m,m))
    os.system('tar zxf {}.tar.gz'.format(m))
    # !wget https://storage.googleapis.com/cloud-tpu-checkpoints/efficientdet/coco/{m}.tar.gz
    # !tar zxf {m}.tar.gz
  ckpt_path = os.path.join(os.getcwd(), m)
  return ckpt_path

# Download checkpoint.
ckpt_path = download(MODEL)
print('Use model in {}'.format(ckpt_path))

# Prepare image and visualization settings.
image_url =  "https://user-images.githubusercontent.com/11736571/77320690-099af300-6d37-11ea-9d86-24f14dc2d540.png"#@param
image_name = 'img.png' #@param

img_path = os.path.join(os.getcwd(), 'img.png')

min_score_thresh = 0.35  #@param
max_boxes_to_draw = 10  #@param
line_thickness =   2#@param

from PIL import Image

# Get the largest of height/width and round to 128.
image_size = max(Image.open(img_path).size)

# In case you need to specify different image size or batch size or #boxes, then
# you need to export a new saved model and run the inferernce.

serve_image_out = 'serve_image_out'
os.system('mkdir {}'.format(serve_image_out))
saved_model_dir = 'savedmodel'
#os.system('rd /s /q {}'.format(saved_model_dir))

start_time = time.time()
# Step 1: export model
# Step 2: do inference with saved model.
os.system('python .\efficientdet\model_inspect.py --runmode=saved_model_infer \
  --model_name=efficientdet-d0 --saved_model_dir={} \
  --input_image=img.png --output_image_dir={} \
  --min_score_thresh={}  --max_boxes_to_draw={}'.format(saved_model_dir,serve_image_out,min_score_thresh,max_boxes_to_draw))

print("----------------------------------------------------------- %s seconds ----------------------------------------------" % (time.time() - start_time))